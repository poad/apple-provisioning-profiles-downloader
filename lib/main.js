import*as a from"@actions/core";import*as b from"fs";import c from"path";import*as d from"@actions/io";import e from"./client.js";const run=async()=>{try{const f=a.getInput("bundle-id",JSON.parse("{\"required\":true,\"trimWhitespace\":true}")),g=a.getInput("api-key-id",JSON.parse("{\"required\":true,\"trimWhitespace\":true}")),h=a.getInput("issuer-id",JSON.parse("{\"required\":true,\"trimWhitespace\":true}")),i=a.getInput("profile-type",JSON.parse("{\"required\":false,\"trimWhitespace\":true}")),j=a.getInput("api-private-key",JSON.parse("{\"required\":false,\"trimWhitespace\":true}")),k=a.getInput("api-private-key-file",JSON.parse("{\"required\":false,\"trimWhitespace\":true}")),l=a.getInput("token-duration",JSON.parse("{\"required\":false,\"trimWhitespace\":true}"));if(0===j.length){const m=c.resolve(__dirname,k),n=b.statSync(m).isFile()||!1;if(!n)throw new Error("Specify either 'api-private-key' or 'api-private-key-file'.")}if(""!==l&&Number.isNaN(l))throw new Error("The 'token-duration' must be an integer value.");const o=""!==l?Number(l):void 0;if(void 0!==o&&(o<1||o>1200))throw new Error("The 'token-duration' must be in the range of 1 to 1200.");if(!process.env.HOME)throw new Error("Environment variable `HOME` is not defined!");a.info(`bundle-id: ${f}`),a.info(`api-key-id: ${g}`),a.info(`issuer-id: ${h}`),a.info(`profile-type: ${i}`),a.info(`api-private-key: ${j?"specified":void 0}`),a.info(`api-private-key-file: ${k}`),a.info(`token-duration: ${l}`);const p=j||b.readFileSync(c.resolve(k)),q=e.Client({privateKey:p,issuerId:h,apiKeyId:g,duration:o}),r=await q.listBundleIds({"filter[identifier]":f,include:"profiles","fields[profiles]":"bundleId,certificates,createdDate,devices,expirationDate,name,platform,profileContent,profileState,profileType,uuid"}),s=r,t=s.data.filter(a=>a.attributes.identifier===f&& void 0!==a.relationships.profiles).flatMap(a=>a.relationships.profiles.data).map(a=>a.id),u=s.included.filter(a=>"profiles"===a.type&&t.includes(a.id)&&"ACTIVE"===a.attributes.profileState&&a.attributes.profileType===i).map(a=>a);if(u.findIndex(a=>void 0!==a.attributes.uuid&&a.attributes.profileContent))throw new Error("Profile attributes `uuid` and `profileContent` must be defined!");const v=c.join(process.env.HOME,"/Library/MobileDevice/Provisioning Profiles");await d.mkdirP(v),u.map(async a=>{const b=`${a.attributes.uuid}.mobileprovision`;return{fullPath:c.join(v,b),profileType:a.attributes.profileType,name:a.attributes.name,content:a.attributes.profileContent}}).forEach(async c=>{const d=Buffer.from((await c).content,"base64");b.writeFileSync((await c).fullPath,d),a.info(`Wrote ${(await c).profileType} profile '${(await c).name}' to '${(await c).fullPath}'.`)}),a.setOutput("profiles",JSON.stringify(u.map(a=>({name:a.attributes.name,udid:a.attributes.uuid,type:a.attributes.profileType.toString()}))))}catch(w){w instanceof Error?(a.error(w),a.setFailed(w.message)):(a.error(JSON.stringify(w)),a.setFailed(JSON.stringify(w)))}};run()